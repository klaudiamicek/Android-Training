package com.example.sqlite;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class ContactsDB {

    public static final String KEY_ROWID = "_id";
    public static final String KEY_NAME = "person_name";
    public static final String KEY_CELL = "_cell";


    private final String DATABASE_NAME = "ContactsDB";
    private final String DATABASE_TABLE = "ContactsTable";
    private final int DATABASE_VERSION = 1;

    private DBHelper ourHelper;
    private final Context ourContext;
    private SQLiteDatabase ourDatabase;

    //constructor
    public ContactsDB (Context context) {
        ourContext = context;
    }

    private class DBHelper extends SQLiteOpenHelper {
        //constructor
        public DBHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        //when update runs, drops/deletes table and recreates table
        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

            db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE);
            onCreate(db);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {

            //string to create table with text columns
            String sqlCode = "CREATE TABLE " + DATABASE_TABLE + " (" +
                    KEY_ROWID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                    KEY_NAME + " TEXT NOT NULL, " +
                    KEY_CELL + "TEXT NOT NULL);";
            db.execSQL(sqlCode);

        }
    }
    //method to open database to start reading or writing
    public ContactsDB open() throws SQLException {
        ourHelper = new DBHelper(ourContext);
        ourDatabase = ourHelper.getWritableDatabase();
        return this;

    }
    //method to close database
    public void close() {
        ourHelper.close();
    }

    public long createEntry(String name, String cell) {
        ContentValues cv = new ContentValues();
        //adds key values (name, cell) and inserts to database
        cv.put(KEY_NAME, name);
        cv.put(KEY_CELL, cell);
        return ourDatabase.insert(DATABASE_TABLE, null, cv);
    }

    public String getData() {
        //creating array to indicate columns to retrieve data from database
        String [] columns = new String [] {KEY_ROWID, KEY_NAME, KEY_CELL};
        //creating cursor object to move cursor
        Cursor c = ourDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);

        String result = "";

        //gets column index, initializing variables
        int iRowID = c.getColumnIndex(KEY_ROWID);
        int iName = c.getColumnIndex(KEY_NAME);
        int iCell = c.getColumnIndex(KEY_CELL);

        //for loop to extract data, starting with cursor at first item and moving to next one
        //loop runs while cursor is not after last item (while there's data)
        for(c.moveToFirst();!c.isAfterLast();c.moveToNext()) {
            result = result + c.getString(iRowID) + ": " + c.getString(iName) + " " +
                    c.getString(iCell) + "\n";
        }
        //closes cursor, frees up memory
        c.close();

        return result;
    }

    public long deleteEntry(String rowId) {
        //deleting in database table with rowid
        return ourDatabase.delete(DATABASE_TABLE, KEY_ROWID + "=?", new String [] {rowId});
    }

    public long updateEntry(String rowId, String name, String cell) {
        ContentValues cv = new ContentValues();
        //adds key values (name, cell) and updates database (changing columns with values with row id)
        cv.put(KEY_NAME, name);
        cv.put(KEY_CELL, cell);
        return ourDatabase.update(DATABASE_TABLE, cv, KEY_ROWID + "=?", new String [] {rowId});
    }

}
