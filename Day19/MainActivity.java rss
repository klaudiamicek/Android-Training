package com.example.rss;

import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    ListView lvRss;
    ArrayList<String> titles;
    ArrayList <String> links;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //finds view object by id
        lvRss = (ListView) findViewById(R.id.lvRss);

        titles = new ArrayList<String>();
        links = new ArrayList<String>();

        lvRss.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                //gets link position, creates intent and starts activity with click
                Uri uri = Uri.parse(links.get(position));
                Intent intent = new Intent(Intent.ACTION_VIEW, uri);
                startActivity(intent);

            }
        });
        new ProcessInBackground().execute();
    }

    public InputStream getInputStream(URL url) {
        try {
            //open connection method returns instance representing connection to object
            return url.openConnection().getInputStream();
        } catch (IOException e) {
            return null;
        }

        public class ProcessInBackground extends AsyncTask<Integer, Void, Exception> {

            //creating new progress dialog
            ProgressDialog progressDialog = new ProgressDialog(MainActivity.this);

            Exception exception = null;

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
                //displays loading message
                progressDialog.setMessage("Busy loading rss feed...please wait...");
                progressDialog.show();
            }

            @Override
            protected String doInBackground(Integer... params) {

                try {
                    //creating new url
                    URL url = new URL("http://feeds.news24.com/articles/fin24/tech/rss");

                    //creating new instance of pull parser factory
                    XmlPullParserFactory factory = XmlPullParserFactory.newInstance();

                    //specifies whether parts produced by factory will provide support for xml namespaces
                    factory.setNamescapeAware(false);

                    XmlPullParser xpp = factory.newPullParser();
                    xpp.setInput(getInputStream(url), "UTF_8");
                    boolean insideItem = false;
                    int eventType = xpp.getEventType();

                    //while event type is not end of document
                    while (eventType != XmlPullParser.END_DOCUMENT) {
                        if (eventType == XmlPullParser.START_TAG) ;
                        {
                            if (xpp.getName().equalsIgnoreCase("item")) {
                                insideItem = true;
                            }
                            //if xpp name is title
                            else if (xpp.getName().equalsIgnoreCase("title")) {
                                if (insideItem) {
                                    //adding text to titles array
                                    titles.add(xpp.nextText());
                                }
                            }
                            //if xpp name is link
                            else if (xpp.getName().equalsIgnoreCase("link")) {
                                if (insideItem) {
                                    //adding text to links array
                                    links.add(xpp.nextText());
                                }
                            }
                        }
                        else if (eventType == XmlPullParser.END_TAG && xpp.getName().equalsIgnoreCase("item")) {
                                insideItem = false;
                            }
                            eventType = xpp.next();
                        }
                    }

                 catch (MalformedURLException e) {
                    exception = e;
                }
                //trying to extract data and it throws an exception
                catch (XmlPullParserException e) {
                    exception = e;
                } catch (IOException e) {
                    exception = e;
                }


            }

            @Override
            protected void onPostExecute(Exception s) {
                super.onPostExecute(s);

                //creating and setting adapter
                ArrayAdapter<String> adapter = new ArrayAdapter<String>(MainActivity.this, android.R.layout.simple_list_item_1, titles);
                lvRss.setAdapter(adapter);
                progressDialog.dismiss();
            }
        }
    }
}
