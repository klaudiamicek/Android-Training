package com.example.service;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.media.MediaPlayer;
import android.os.IBinder;
import android.widget.Toast;

public class MyPlayService extends Service implements MediaPlayer.OnCompletionListener.MediaPlayer.OnPreparedListener.
MediaPlayer.OnErrorListener.MediaPlayer.OnSeekCompleteListener.MediaPlayer.OnInfoListener.
MediaPlayer.OnBufferingUpdateListener {

    private MediaPlayer mediaPlayer;
    String link;
    private MusicStoppedListener musicStoppedListener;

    public MyPlayService() {
    }

    @Override
    public IBinder onBind(Intent intent) {
        // TODO: Return the communication channel to the service.
        throw new UnsupportedOperationException("Not yet implemented");
    }
    @Override
    public void onCreate() {
        super.onCreate();

        //creating new mediaplayer and setting listeners
        mediaPlayer = new MediaPlayer();
        mediaPlayer.setOnCompletionListener(this);
        mediaPlayer.setOnPreparedListener(this);
        mediaPlayer.setOnErrorListener(this);
        mediaPlayer.setOnSeekCompleteListener(this);
        mediaPlayer.setOnInfoListener(this);
        mediaPlayer.setOnBufferingUpdateListener(this);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
       //gets link from intent and then resets mediaplayer
        link = intent.getStringExtra("AudioLink");
        mediaPlayer.reset();
        musicStoppedListener = (MusicStoppedListener) ApplicationClass.context;

        //if mediaplayer isn't playing
        if (!mediaPlayer.isPlaying()) {
            try {
                //sets link as audioLink data source
                mediaPlayer.setDataSource(link);
                //prepares player for playback
                mediaPlayer.prepareAsync();
            }
            catch (Exception e) {
                //displays message if error
                Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
            }
        }

        return START_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();

        if (mediaPlayer != null) {
            if (mediaPlayer.isPlaying()) {
                //stops media player
                mediaPlayer.stop();
            }
            //releases resources associated with mediaplayer object
            mediaPlayer.release();

        }
    }

    @Override
    public void onBufferingUpdate(MediaPlayer mp, int percent) {

    }

    @Override
    public void onCompletion(MediaPlayer mp) {
        //if media player is playing, call stop
        if (mp.isPlaying()) {
            mp.stop();
        }
        //stops service from running
        musicStoppedListener.onMusicStopped();
        stopSelf();
    }

    @Override
    public boolean onError(MediaPlayer mp, int what, int extra) {
        //switch statement based on int what, cases display error message
        switch (what) {
            case MediaPlayer.MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK:
                Toast.makeText(this, "MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK",
                Toast.LENGTH_SHORT).show();
                break;

            case MediaPlayer.MEDIA_ERROR_SERVER_DIED:
                Toast.makeText(this, "MEDIA_ERROR_SERVER_DIED",
                        Toast.LENGTH_SHORT).show();
                break;
            case MediaPlayer.MEDIA_ERROR_UNKNOWN:
                Toast.makeText(this, "MEDIA_ERROR_UNKNOWN",
                        Toast.LENGTH_SHORT).show();
                break;
        }
        return false;
    }

    @Override
    public boolean onInfo(MediaPlayer mp, int what, int extra) {
        return false;
    }

    @Override
    public void onPrepared(MediaPlayer mp) {

        //starts media player if it's not playing
        if (!mp.isPlaying()) {
            mp.start();
        }

    }

    @Override
    public void onSeekComplete(MediaPlayer mp) {

    }

}
