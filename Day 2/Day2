 
//using binary search to find first and last position

class Solution {
	
  //initializing starting index, ending index, array
	int start = 0;
	static int[] nums = new int[]{ 5,7,7,8,8,10};  
  int end = nums.length-1;
	
    public int searchRange (int[] nums, int target) {    
     
       int first_position = -1;
       //finding first position in left half of array
       for (int i = 0; i < nums.length; i++) { 
          int middle = (start + end) / 2;
          //checks if middle number equals target and then previous numbers
          if (nums[middle] == target) { 
        	  first_position =  middle;
              end = middle - 1;
          //if middle number greater than target, last index of range decreases by 1

          } else if (nums[middle] > target) {
              end = middle - 1;
          //first index of range increases by 1
          } else {
              start = middle + 1;
          }
       }
        
       return first_position;
    }
 
   public static int searchSecondRange(int[] nums, int target) {
 
          int start = 0;
          int end = nums.length - 1; 
          int index = -1;
          //finding last position in right half of array

          for (int i = 0; i < nums.length; i++)  {
              int mid = (start + end) / 2;
              //checks if middle number equals target and then next numbers
              if (nums[mid]==target) {
                index= mid;
                start = mid+1;
                //if middle number greater than target, last index of range decreases by 1
              } else if (nums[mid] > target) {
                 end = mid-1;
                 //first index of range increases by 1
              } else {
                 start = mid+1;
              }
          }
   return index;
   }
  
   public static void main(String[] args) {
       
	   int target = 8;
       //creating object solution
       Solution s = new Solution(); 
       //calling object methods and creating position variables
       int firstPosition = s.searchRange(nums, target);
       int lastPosition  = s.searchSecondRange(nums, target);
 
       System.out.println("[" + firstPosition + "," + lastPosition + "]");             
                
    }
}
